{"ast":null,"code":"import _classCallCheck from \"C:/Users/pradeep/OneDrive/Documents/htdocs/awake-mern/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pradeep/OneDrive/Documents/htdocs/awake-mern/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/pradeep/OneDrive/Documents/htdocs/awake-mern/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/pradeep/OneDrive/Documents/htdocs/awake-mern/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\pradeep\\\\OneDrive\\\\Documents\\\\htdocs\\\\awake-mern\\\\frontend\\\\src\\\\components\\\\Word\\\\ShowWords.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ShowWords = /*#__PURE__*/function (_Component) {\n  _inherits(ShowWords, _Component);\n\n  var _super = _createSuper(ShowWords);\n\n  function ShowWords(props) {\n    var _this;\n\n    _classCallCheck(this, ShowWords);\n\n    _this = _super.call(this, props);\n\n    _this.filterWords = function () {\n      var searchByKeyWord = document.getElementById('searchWord').value;\n\n      if (!searchByKeyWord) {\n        _this.setState({\n          words: _this.props && _this.props.words && _this.props.words.length ? _this.props.words : []\n        });\n      } else if (!(_this.props && _this.props.words && _this.props.words.length)) {\n        _this.setState({\n          words: []\n        });\n      }\n\n      var filteredWords = [];\n\n      _this.props.words.forEach(function (data) {\n        if (data.wordName.toUpperCase().includes(searchByKeyWord.toUpperCase())) {\n          filteredWords.push(data);\n        }\n      });\n\n      _this.setState({\n        words: filteredWords\n      });\n    };\n\n    _this.state = {\n      words: _this.props && _this.props.words && _this.props.words.length ? _this.props.words : []\n    };\n    return _this;\n  }\n\n  _createClass(ShowWords, [{\n    key: \"capitalizeFirstLetter\",\n    value: function capitalizeFirstLetter(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.words !== this.props.words) {\n        this.setState({\n          words: this.props && this.props.words && this.props.words.length ? this.props.words : []\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"words\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordsTitle\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Words List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"searchWord\",\n          className: \"searchWord\",\n          placeholder: \"Search any word\",\n          onChange: function onChange(e) {\n            _this2.filterWords();\n          },\n          name: \"search_word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filteredWords\",\n          children: this.state.words ? this.state.words.map(function (data) {\n            var _data$_id;\n\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word\",\n              children: data.wordName ? _this2.capitalizeFirstLetter(data.wordName) : 'Empty'\n            }, (_data$_id = data._id) !== null && _data$_id !== void 0 ? _data$_id : Math.random(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, _this2);\n          }) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word\",\n            children: \"No Words\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return ShowWords;\n}(Component);\n\nexport { ShowWords as default };","map":{"version":3,"sources":["C:/Users/pradeep/OneDrive/Documents/htdocs/awake-mern/frontend/src/components/Word/ShowWords.js"],"names":["React","Component","ShowWords","props","filterWords","searchByKeyWord","document","getElementById","value","setState","words","length","filteredWords","forEach","data","wordName","toUpperCase","includes","push","state","string","charAt","slice","prevProps","e","map","capitalizeFirstLetter","_id","Math","random"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\n\r\nexport default class ShowWords extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {words: this.props && this.props.words && \r\n            this.props.words.length ? this.props.words : []};\r\n    }\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.words !== this.props.words) {\r\n            this.setState({\r\n                words: this.props && this.props.words && this.props.words.length ? this.props.words : []\r\n            })\r\n        }\r\n    }\r\n\r\n    filterWords = () => {\r\n        let searchByKeyWord = document.getElementById('searchWord').value;\r\n        if(!searchByKeyWord){\r\n            this.setState({\r\n                    words: this.props && this.props.words && this.props.words.length ? this.props.words : []\r\n                });  \r\n        } else if(!(this.props && this.props.words && this.props.words.length)){\r\n            this.setState({\r\n                words: []\r\n            });\r\n        }\r\n\r\n        let filteredWords = [];\r\n        this.props.words.forEach((data) => {\r\n            if(data.wordName.toUpperCase().includes(searchByKeyWord.toUpperCase())){\r\n                filteredWords.push(data);\r\n            }\r\n        })\r\n        this.setState({\r\n            words: filteredWords\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"words\">\r\n                <div className=\"wordsTitle\"><b>Words List</b></div>\r\n                <input type='text' id='searchWord'\r\n                className='searchWord'\r\n                placeholder='Search any word' onChange={(e) => {\r\n                    this.filterWords();\r\n                }}\r\n                name='search_word' />\r\n\r\n                <div className='filteredWords'>\r\n                    { this.state.words ? (this.state.words.map((data) => (\r\n                    <div key={data._id ?? Math.random()} className=\"word\">\r\n                        {data.wordName ? this.capitalizeFirstLetter(data.wordName) : 'Empty'}</div>\r\n                ))) : <div className=\"word\">No Words</div>}\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}